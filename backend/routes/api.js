const apiKeyAuth = require('../middleware/apiKeyAuth');
const { Package } = require('../models');
const { formatDateTimeToDDMMYYYY, getCairoDateTime } = require('../utils/dateUtils');

router.post('/packages/shopify', apiKeyAuth, async (req, res) => {
  console.log('Received POST /api/packages/shopify');
  try {
    const { packages } = req.body;
    if (!Array.isArray(packages) || packages.length === 0) {
      return res.status(400).json({ message: 'No packages provided' });
    }

    const createdPackages = [];
    for (const pkg of packages) {
      const newPackage = await Package.create({
        shopId: req.shop.id,
        trackingNumber: undefined, // Will be auto-generated by hook
        packageDescription: pkg.packageDescription,
        weight: pkg.weight,
        dimensions: pkg.dimensions || null,
        status: 'awaiting_schedule',
        pickupContactName: pkg.pickupContactName || req.shop.contactPersonName,
        pickupContactPhone: pkg.pickupContactPhone || req.shop.contactPersonPhone,
        pickupAddress: pkg.pickupAddress || req.shop.address,
        deliveryContactName: pkg.deliveryContactName,
        deliveryContactPhone: pkg.deliveryContactPhone,
        deliveryAddress: pkg.deliveryAddress,
        schedulePickupTime: pkg.schedulePickupTime || formatDateTimeToDDMMYYYY(getCairoDateTime()),
        priority: pkg.priority || 'normal',
        codAmount: pkg.codAmount || 0,
        deliveryCost: pkg.deliveryCost || 0,
        paymentMethod: pkg.paymentMethod || null,
        paymentNotes: pkg.paymentNotes || null,
        shopNotes: pkg.shopNotes || null,
        isPaid: false,
        paymentStatus: 'pending'
      });
      createdPackages.push(newPackage);
    }

    res.status(201).json({ success: true, createdPackages });
  } catch (error) {
    console.error('Error creating packages from Shopify:', error);
    res.status(500).json({ message: error.message });
  }
}); 