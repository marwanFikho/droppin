const { sequelize, User, Shop, Driver, Package } = require('../models/index');

// Get dashboard statistics
exports.getDashboardStats = async (req, res) => {
  try {
    // Get user counts
    const totalUsers = await User.count({ where: { role: 'user' } });
    const totalShops = await User.count({ where: { role: 'shop' } });
    const totalDrivers = await User.count({ where: { role: 'driver' } });
    const pendingApprovals = await User.count({ 
      where: { 
        isApproved: false,
        role: ['shop', 'driver']
      }
    });

    // Get package counts
    const totalPackages = await Package.count();
    const pendingPackages = await Package.count({ where: { status: 'pending' } });
    const inTransitPackages = await Package.count({ 
      where: { status: ['assigned', 'pickedup', 'in-transit'] }
    });
    const deliveredPackages = await Package.count({ where: { status: 'delivered' } });

    res.json({
      users: {
        total: totalUsers + totalShops + totalDrivers,
        customers: totalUsers,
        shops: totalShops,
        drivers: totalDrivers,
        pendingApprovals
      },
      packages: {
        total: totalPackages,
        pending: pendingPackages,
        inTransit: inTransitPackages,
        delivered: deliveredPackages
      }
    });
  } catch (error) {
    console.error('Error getting dashboard stats:', error);
    res.status(500).json({ message: error.message });
  }
};

// Get all users (with optional filtering)
exports.getUsers = async (req, res) => {
  try {
    const { role, isApproved, search } = req.query;
    const whereClause = {};
    
    // Add role filter if provided
    if (role && role !== 'all') {
      whereClause.role = role;
    }
    
    // Add approval status filter if provided
    if (isApproved !== undefined) {
      whereClause.isApproved = isApproved === 'true';
    }
    
    // Add search filter if provided
    if (search) {
      whereClause[sequelize.Op.or] = [
        { name: { [sequelize.Op.like]: `%${search}%` } },
        { email: { [sequelize.Op.like]: `%${search}%` } },
        { phone: { [sequelize.Op.like]: `%${search}%` } }
      ];
    }
    
    const users = await User.findAll({
      where: whereClause,
      attributes: { exclude: ['password'] },
      order: [['createdAt', 'DESC']]
    });
    
    // Fetch additional data for shops and drivers
    const enhancedUsers = await Promise.all(users.map(async (user) => {
      const userData = user.toJSON();
      
      if (user.role === 'shop') {
        const shop = await Shop.findOne({ where: { userId: user.id } });
        if (shop) {
          userData.businessName = shop.businessName;
          userData.businessType = shop.businessType;
          userData.shopId = shop.id;
        }
      } else if (user.role === 'driver') {
        const driver = await Driver.findOne({ where: { userId: user.id } });
        if (driver) {
          userData.vehicleType = driver.vehicleType;
          userData.licensePlate = driver.licensePlate;
          userData.driverId = driver.id;
        }
      }
      
      return userData;
    }));
    
    res.json(enhancedUsers);
  } catch (error) {
    console.error('Error getting users:', error);
    res.status(500).json({ message: error.message });
  }
};

// Get pending approval requests
exports.getPendingApprovals = async (req, res) => {
  try {
    const pendingUsers = await User.findAll({
      where: { 
        isApproved: false,
        role: ['shop', 'driver']
      },
      attributes: { exclude: ['password'] },
      order: [['createdAt', 'DESC']]
    });
    
    // Fetch additional data for shops and drivers
    const enhancedUsers = await Promise.all(pendingUsers.map(async (user) => {
      const userData = user.toJSON();
      
      if (user.role === 'shop') {
        const shop = await Shop.findOne({ where: { userId: user.id } });
        if (shop) {
          userData.businessName = shop.businessName;
          userData.businessType = shop.businessType;
          userData.shopId = shop.id;
        }
      } else if (user.role === 'driver') {
        const driver = await Driver.findOne({ where: { userId: user.id } });
        if (driver) {
          userData.vehicleType = driver.vehicleType;
          userData.licensePlate = driver.licensePlate;
          userData.driverId = driver.id;
        }
      }
      
      return userData;
    }));
    
    res.json(enhancedUsers);
  } catch (error) {
    console.error('Error getting pending approvals:', error);
    res.status(500).json({ message: error.message });
  }
};

// Approve or reject a user
exports.approveUser = async (req, res) => {
  const transaction = await sequelize.transaction();
  
  try {
    const { id } = req.params;
    const { approved } = req.body;
    
    if (approved === undefined) {
      await transaction.rollback();
      return res.status(400).json({ message: 'Approval status is required' });
    }
    
    // Update user approval status
    const user = await User.findByPk(id, { transaction });
    
    if (!user) {
      await transaction.rollback();
      return res.status(404).json({ message: 'User not found' });
    }
    
    await user.update({ isApproved: approved }, { transaction });
    
    await transaction.commit();
    
    res.json({ 
      message: `User ${approved ? 'approved' : 'rejected'} successfully`,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        isApproved: user.isApproved
      }
    });
  } catch (error) {
    await transaction.rollback();
    console.error('Error approving user:', error);
    res.status(500).json({ message: error.message });
  }
};

// Get all shops
exports.getShops = async (req, res) => {
  try {
    const { isApproved, search } = req.query;
    
    // Get all shop users
    const shopUsers = await User.findAll({
      where: { role: 'shop' },
      attributes: { exclude: ['password'] }
    });
    
    // Get the shop details for each shop user
    const shops = await Promise.all(shopUsers.map(async (user) => {
      const shop = await Shop.findOne({ where: { userId: user.id } });
      if (!shop) return null;
      
      return {
        ...user.toJSON(),
        shopId: shop.id,
        businessName: shop.businessName,
        businessType: shop.businessType,
        address: shop.address,
        registrationNumber: shop.registrationNumber,
        taxId: shop.taxId
      };
    }));
    
    // Filter out null values (users without shop details)
    const filteredShops = shops.filter(shop => shop !== null);
    
    // Apply filters if provided
    let result = filteredShops;
    
    if (isApproved !== undefined) {
      const approvalStatus = isApproved === 'true';
      result = result.filter(shop => shop.isApproved === approvalStatus);
    }
    
    if (search) {
      const searchTerm = search.toLowerCase();
      result = result.filter(shop => 
        shop.name?.toLowerCase().includes(searchTerm) ||
        shop.email?.toLowerCase().includes(searchTerm) ||
        shop.businessName?.toLowerCase().includes(searchTerm)
      );
    }
    
    res.json(result);
  } catch (error) {
    console.error('Error getting shops:', error);
    res.status(500).json({ message: error.message });
  }
};

// Approve or reject a shop
exports.approveShop = async (req, res) => {
  const transaction = await sequelize.transaction();
  
  try {
    const { id } = req.params;
    const { approved } = req.body;
    
    if (approved === undefined) {
      await transaction.rollback();
      return res.status(400).json({ message: 'Approval status is required' });
    }
    
    // Find the shop
    const shop = await Shop.findByPk(id, { transaction });
    
    if (!shop) {
      await transaction.rollback();
      return res.status(404).json({ message: 'Shop not found' });
    }
    
    // Find and update the associated user
    const user = await User.findByPk(shop.userId, { transaction });
    
    if (!user) {
      await transaction.rollback();
      return res.status(404).json({ message: 'Shop user not found' });
    }
    
    // Update user approval status
    await user.update({ isApproved: approved }, { transaction });
    
    await transaction.commit();
    
    res.json({ 
      message: `Shop ${approved ? 'approved' : 'rejected'} successfully`,
      shop: {
        id: shop.id,
        userId: shop.userId,
        businessName: shop.businessName,
        isApproved: user.isApproved
      }
    });
  } catch (error) {
    await transaction.rollback();
    console.error('Error approving shop:', error);
    res.status(500).json({ message: error.message });
  }
};

// Get all drivers
exports.getDrivers = async (req, res) => {
  try {
    const { isApproved, search } = req.query;
    
    // Get all driver users
    const driverUsers = await User.findAll({
      where: { role: 'driver' },
      attributes: { exclude: ['password'] }
    });
    
    // Get the driver details for each driver user
    const drivers = await Promise.all(driverUsers.map(async (user) => {
      const driver = await Driver.findOne({ where: { userId: user.id } });
      if (!driver) return null;
      
      return {
        ...user.toJSON(),
        driverId: driver.id,
        vehicleType: driver.vehicleType,
        licensePlate: driver.licensePlate,
        model: driver.model,
        driverLicense: driver.driverLicense,
        color: driver.color,
        isAvailable: driver.isAvailable
      };
    }));
    
    // Filter out null values (users without driver details)
    const filteredDrivers = drivers.filter(driver => driver !== null);
    
    // Apply filters if provided
    let result = filteredDrivers;
    
    if (isApproved !== undefined) {
      const approvalStatus = isApproved === 'true';
      result = result.filter(driver => driver.isApproved === approvalStatus);
    }
    
    if (search) {
      const searchTerm = search.toLowerCase();
      result = result.filter(driver => 
        driver.name?.toLowerCase().includes(searchTerm) ||
        driver.email?.toLowerCase().includes(searchTerm) ||
        driver.licensePlate?.toLowerCase().includes(searchTerm)
      );
    }
    
    res.json(result);
  } catch (error) {
    console.error('Error getting drivers:', error);
    res.status(500).json({ message: error.message });
  }
};

// Approve or reject a driver
exports.approveDriver = async (req, res) => {
  const transaction = await sequelize.transaction();
  
  try {
    const { id } = req.params;
    const { approved } = req.body;
    
    if (approved === undefined) {
      await transaction.rollback();
      return res.status(400).json({ message: 'Approval status is required' });
    }
    
    // Find the driver
    const driver = await Driver.findByPk(id, { transaction });
    
    if (!driver) {
      await transaction.rollback();
      return res.status(404).json({ message: 'Driver not found' });
    }
    
    // Find and update the associated user
    const user = await User.findByPk(driver.userId, { transaction });
    
    if (!user) {
      await transaction.rollback();
      return res.status(404).json({ message: 'Driver user not found' });
    }
    
    // Update user approval status
    await user.update({ isApproved: approved }, { transaction });
    
    await transaction.commit();
    
    res.json({ 
      message: `Driver ${approved ? 'approved' : 'rejected'} successfully`,
      driver: {
        id: driver.id,
        userId: driver.userId,
        vehicleType: driver.vehicleType,
        isApproved: user.isApproved
      }
    });
  } catch (error) {
    await transaction.rollback();
    console.error('Error approving driver:', error);
    res.status(500).json({ message: error.message });
  }
};

// Get all packages (with optional filtering)
exports.getPackages = async (req, res) => {
  try {
    const { status, shopId, search } = req.query;
    const whereClause = {};
    
    // Add status filter if provided
    if (status && status !== 'all') {
      whereClause.status = status;
    }
    
    // Add shop filter if provided
    if (shopId) {
      whereClause.shopId = shopId;
    }
    
    // Add search filter if provided
    if (search) {
      whereClause[sequelize.Op.or] = [
        { trackingNumber: { [sequelize.Op.like]: `%${search}%` } },
        { packageDescription: { [sequelize.Op.like]: `%${search}%` } }
      ];
    }
    
    const packages = await Package.findAll({
      where: whereClause,
      order: [['createdAt', 'DESC']]
    });
    
    // Fetch additional data for each package
    const enhancedPackages = await Promise.all(packages.map(async (pkg) => {
      const packageData = pkg.toJSON();
      
      // Get shop info
      if (pkg.shopId) {
        const shop = await Shop.findByPk(pkg.shopId);
        if (shop) {
          const shopUser = await User.findByPk(shop.userId, {
            attributes: ['name', 'email', 'phone']
          });
          
          packageData.shop = {
            id: shop.id,
            businessName: shop.businessName,
            contact: shopUser ? {
              name: shopUser.name,
              email: shopUser.email,
              phone: shopUser.phone
            } : null
          };
        }
      }
      
      // Get driver info
      if (pkg.driverId) {
        const driver = await Driver.findByPk(pkg.driverId);
        if (driver) {
          const driverUser = await User.findByPk(driver.userId, {
            attributes: ['name', 'email', 'phone']
          });
          
          packageData.driver = {
            id: driver.id,
            vehicleType: driver.vehicleType,
            licensePlate: driver.licensePlate,
            contact: driverUser ? {
              name: driverUser.name,
              email: driverUser.email,
              phone: driverUser.phone
            } : null
          };
        }
      }
      
      return packageData;
    }));
    
    res.json(enhancedPackages);
  } catch (error) {
    console.error('Error getting packages:', error);
    res.status(500).json({ message: error.message });
  }
};
